# YOUR CODE HERE
import tensorflow as tf
from tensorflow.python.data import Dataset
import pandas as pd
import numpy as np
california_data=pd.read_csv("https://storage.googleapis.com/mledu-datasets/california_housing_train.csv", sep=",")

#shuffling data
california_data=california_data.reindex(np.random.permutation(california_data.index))
california_data.describe()
target='median_house_value'
period = 10
def my_train(feature='total_rooms', steps, learning_rate, batch_size):
  steps_per_period = steps/period
  #step 1: define input column and configure feature_columns
  my_feature = california_data[feature]
  feature_columns = tf.feature_column.numeric_column(feature)
  
  #step 2: define targets
  targets = california_data[target]
  
  #step 3: configure linear regressor
  my_optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)
  my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer,5)
  linear_regressor = tf.estimator.LinearRegressor(optimizer = my_optimizer, feature_columns=feature_columns)
  
  #step 4: define input function
  def input_function(feature, target, num_epochs,shuffle = True):
    #convert pandas input feature into a dict of numpy arrays
    features = {key:np.array(value) for key,value in dict(feature).items()}
    
    #create a datasource of Datasource type
    ds = Dataset.from_tensor_slices((features,target))
    #configure ds for batching
    ds = ds.batch().repeat(batch_size)
    
    if shuffle:
      ds = ds.shuffle(batch_size=10000)
      
    #make an iterator and return the next batch of data
    (feature,label) = ds.make_one_shot_iterator().get_next()
    return (feature,label)
    RMSE = []
  #Step 5: Train the model ( doing it inside the loop to capture loss at every period)
  for period in range(0,periods):
    #train the model
    _ = linear_regressor.train(input_fn = lambda:input_function(my_feature,targets,num_epochs = None, shuffle = True),steps = steps_per_period)
    #evaluate the model
    predictions = linear_regressor.predict(input_fn = lambda:input_function(my_feature,targets,num_epochs = 1, shuffle = False))
    predictions = np.array(item['predictions'][0] for item in predictions)
    #compute rmse
    rmse = math.sqrt(metrics.root_mean_squared_error(np.array(predictions,)))
    RMSE.append(rmse)
    #print RMSE
    print "  period %02d : %0.2f" % (period, rmse)
  print "Model training finished"
  
  #Outputting final data:
  calibration_data = pd.Dataframe()
  calibration_data['prediction'] = pd.Series(predictions)
  calibration_data['target'] = pd.Series(targets)
  calibration_data.describe()
  print "Final RMSE: %0.2f" %RMSE
  
  #Working code:
  def my_train(feature, learning_rate, steps, batch_size):
  my_feature = california_data[[feature]]
  feature_column = [tf.feature_column.numeric_column(feature)]
  
  target = california_data['median_house_value']
  
  my_optimizer = tf.train.GradientDescentOptimizer(learning_rate = learning_rate)
  my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, 5)
  linear_regressor = tf.estimator.LinearRegressor(optimizer=my_optimizer, feature_columns=feature_column)
  
  def input(feature, target, num_epochs = None, shuffle = True):
    features = {key:np.array(value) for key, value in dict(feature).items()}
    ds = Dataset.from_tensor_slices((features,target))
    ds = ds.batch(batch_size).repeat(num_epochs)
    
    if shuffle:
      ds.shuffle(10000)
      
    feature,label = ds.make_one_shot_iterator().get_next()
    
    return feature,label
  periods = 10
  steps_per_period = steps/periods
  RMSE = []
  for period in range(0,periods):
    linear_regressor.train(input_fn = lambda:input(my_feature, target), steps = steps_per_period)
    prediction_fn = lambda: input(my_feature, target, num_epochs = 1, shuffle = False)
    predictions = linear_regressor.predict(input_fn = prediction_fn)
    #format presictions to numpy array to compute error metrics
    predictions = np.array([item['predictions'][0] for item in predictions])
    mse = metrics. mean_squared_error(target, predictions)
    rmse = math.sqrt(mse)
    print "Training loss for period %02d: %0.2f" % (period, rmse)
    RMSE.append(rmse)
  
  print "Completed training. Final rmse: %0.2f" %rmse
  print "RMSEs" %RMSE
  
  my_train(feature = 'total_rooms', learning_rate = 0.0001, steps = 100, batch_size = 10)